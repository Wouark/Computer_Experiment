━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
コンパイラ実験  プログラムファイル集
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

●このディレクトリの構成

        Readme.txt      このファイル
        Programs.txt    主要プログラム一覧
        Functions.txt   関数一覧

        main/           課題実施用のディレクトリ
        samples?/       例題集のディレクトリ
        tests/          参考プログラムのディレクトリ
        library/        実験用ライブラリへのリンク

●プログラムファイルのコンパイル

        実行ファイルを作るには，ディレクトリ main で make を実行する．

        【例】実行ファイルを作る
        ｜
        ｜ cd ~/CPrime/main/    課題実施用ディレクトリに移る
        ｜ make                 コンパイルを自動実行

        make コマンドを実行すると，Makefile に書かれたファイル間の
        依存関係に従い，コンパイル等の必要な作業が自動実行される．

●プログラムの実行

        コンパイラ (calculate, compile) や 仮想計算機 (run) を実行するには，
        入力ファイルを引き数として与える．オプション -v を付けて実行すると
        詳細情報が得られる．

        【例】原始プログラムファイルを入力としてコンパイラを実行
        ｜
        ｜cd ~/CPrime/main/     課題実施用ディレクトリに移る
        ｜./compile -v ../samples0/empty.cpr 
        ｜                      コンパイラを実行，実行時に詳細情報を見る，
        ｜                      入力する原始プログラムファイルは
        ｜                      ../samples0/empty.cpr

        C'言語コンパイラ (compile) が出力する目的コードを入力として，
        仮想計算機 (run) を実行すれば，C'言語プログラムを解釈・実行できる．

        【例】目的コードファイルを入力として仮想計算機を実行
        ｜
        ｜cd ~/CPrime/main/     課題実施用ディレクトリに移る
        ｜./run -v ../samples0/arithmetic.pco
        ｜                      仮想計算機を実行，実行時に詳細情報を見る，
        ｜                      入力する目的コードファイルは
        ｜                      ../samples0/arithmetic.pco

        なお，UNIX での入出力の切り替え（リダイレクションとパイプ）については，
	関連の書籍やネットワーク上の文書などで自習すること．

●実験用ライブラリの利用

        実験用ライブラリ関数の説明は，ファイル Functions.txt にある．
        ライブラリを使った参考プログラムの動作を見るには，ディレクトリ tests で
        make を実行する．

        【例】参考プログラムの動作テスト
        ｜
        ｜ cd ~/CPrime/tests/   参考プログラムのディレクトリに移る
        ｜ make                 コンパイルとテストを自動実行
        ｜ less results.txt     テスト結果を表示（less の終了は q）

        各参考プログラム *.c を読むと，実験用に提供されているライブラリ関数の
        具体的な使い方が分かる．詳細を知るには，ヘッダファイル cprime.h や
        ディレクトリ library にあるソースファイルを読むこと．

●プログラム編集時の注意

        ヘッダファイルに宣言がある関数は，別のファイルから #include で
        読み込んで使える．読み込むヘッダファイルを追加するなど，
        プログラム全体の構成を変えるときは，Makefile も同時に書き換える．

        分割コンパイルの方法や make の使い方は，UNIX 関連の書籍，
        オンラインマニュアル，ネットワーク上の文書などで自習すること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
山田 俊行
http://www.cs.info.mie-u.ac.jp/~toshi/
